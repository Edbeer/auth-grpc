// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "guthub.com/Edbeer/microservices/internal/core"
)

// MockSessionStorage is a mock of SessionStorage interface.
type MockSessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStorageMockRecorder
}

// MockSessionStorageMockRecorder is the mock recorder for MockSessionStorage.
type MockSessionStorageMockRecorder struct {
	mock *MockSessionStorage
}

// NewMockSessionStorage creates a new mock instance.
func NewMockSessionStorage(ctrl *gomock.Controller) *MockSessionStorage {
	mock := &MockSessionStorage{ctrl: ctrl}
	mock.recorder = &MockSessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStorage) EXPECT() *MockSessionStorageMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionStorage) CreateSession(ctx context.Context, session *core.Session, expire int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session, expire)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionStorageMockRecorder) CreateSession(ctx, session, expire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionStorage)(nil).CreateSession), ctx, session, expire)
}

// DeleteSession mocks base method.
func (m *MockSessionStorage) DeleteSession(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionStorageMockRecorder) DeleteSession(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionStorage)(nil).DeleteSession), ctx, refreshToken)
}

// GetSessionByToken mocks base method.
func (m *MockSessionStorage) GetSessionByToken(ctx context.Context, refreshToken string) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByToken", ctx, refreshToken)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByToken indicates an expected call of GetSessionByToken.
func (mr *MockSessionStorageMockRecorder) GetSessionByToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByToken", reflect.TypeOf((*MockSessionStorage)(nil).GetSessionByToken), ctx, refreshToken)
}

// MockAccountStorage is a mock of AccountStorage interface.
type MockAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorageMockRecorder
}

// MockAccountStorageMockRecorder is the mock recorder for MockAccountStorage.
type MockAccountStorageMockRecorder struct {
	mock *MockAccountStorage
}

// NewMockAccountStorage creates a new mock instance.
func NewMockAccountStorage(ctrl *gomock.Controller) *MockAccountStorage {
	mock := &MockAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorage) EXPECT() *MockAccountStorageMockRecorder {
	return m.recorder
}

// GetByIDCtx mocks base method.
func (m *MockAccountStorage) GetByIDCtx(ctx context.Context, key string) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDCtx", ctx, key)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDCtx indicates an expected call of GetByIDCtx.
func (mr *MockAccountStorageMockRecorder) GetByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDCtx", reflect.TypeOf((*MockAccountStorage)(nil).GetByIDCtx), ctx, key)
}

// SetUserCtx mocks base method.
func (m *MockAccountStorage) SetUserCtx(ctx context.Context, key string, seconds int, user *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCtx", ctx, key, seconds, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCtx indicates an expected call of SetUserCtx.
func (mr *MockAccountStorageMockRecorder) SetUserCtx(ctx, key, seconds, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCtx", reflect.TypeOf((*MockAccountStorage)(nil).SetUserCtx), ctx, key, seconds, user)
}
